@using System.ComponentModel.DataAnnotations

@page "/signup"
<h3>Sign Up</h3>

<EditForm Model="@userModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="firstName">First Name:</label>
        <InputText id="firstName" @bind-Value="userModel.FirstName" />
        <ValidationMessage For="@(() => userModel.FirstName)" />
</div>

    <div>
        <label for="lastName">Last Name:</label>
        <InputText id="lastName" @bind-Value="userModel.LastName" />
        <ValidationMessage For="@(() => userModel.LastName)" />
    </div>

    <div>
        <label for="username">Username:</label>
        <InputText id="username" @bind-Value="userModel.Username" />
        <ValidationMessage For="@(() => userModel.Username)" />
    </div>

    <div>
        <label for="email">Email:</label>
        <InputText id="email" @bind-Value="userModel.Email" />
        <ValidationMessage For="@(() => userModel.Email)" />
    </div>

    <div>
        <label for="password">Password:</label>
        <InputText id="password" type="password" @bind-Value="userModel.Password" />
        <ValidationMessage For="@(() => userModel.Password)" />
    </div>

    <div>
        <label for="birthDate">Birth Date:</label>
        <InputDate id="birthDate" @bind-Value="userModel.BirthDate" />
        <ValidationMessage For="@(() => userModel.BirthDate)" />
    </div>

    <button type="submit">Sign Up</button>
</EditForm>

@code {
    private UserModel userModel = new UserModel();

    private void HandleValidSubmit()
    {
        // Handle the form submission
        // You can add your logic here to save the user or perform other actions
        Console.WriteLine($"User: {userModel.Username} - Email: {userModel.Email}");
        Console.WriteLine("Form Submitted Successfully");
    }
public class UserModel
    {
        public Guid UserId { get; set; } = Guid.NewGuid();

        [Required(ErrorMessage = "First Name is required")]
        [MinLength(2, ErrorMessage = "First Name must be at least 2 characters long")]
        [MaxLength(20, ErrorMessage = "First Name cannot be longer than 20 characters")]
        public string? FirstName { get; set; }

        [Required(ErrorMessage = "Last Name is required")]
        [MinLength(2, ErrorMessage = "Last Name must be at least 2 characters long")]
        [MaxLength(20, ErrorMessage = "Last Name cannot be longer than 20 characters")]
        public string? LastName { get; set; }

        [Required(ErrorMessage = "Username is required")]
        [MinLength(2, ErrorMessage = "Username must be at least 2 characters long")]
        [MaxLength(50, ErrorMessage = "Username cannot be longer than 50 characters")]
        public string? Username { get; set; }

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string? Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string? Password { get; set; }

        [Required(ErrorMessage = "Birth Date is required")]
        public DateOnly BirthDate { get; set; }
    }
}